openapi: 3.0.0
info:
  title: WinDat Platform API
  version: 1.0.0
  description: API for managing game lobbies and user interactions within the WinDat platform.

components:
  schemas:
    Lobby:
      type: object
      required:
        - id
        - name
        - created
      properties:
        id:
          type: integer
          format: int32
          description: Unique identifier of the lobby
        name:
          type: string
          description: Name of the lobby
        created:
          type: string
          format: date-time
          description: Time when lobby was created
        updated:
          type: string
          format: date-time
          description: Time when lobby was updated
        closed:
          type: string
          format: date-time
          description: Time when lobby was closed
        userList:
          type: array
          items:
            $ref: '#/components/schemas/User'
    User:
      type: object
      properties:
        id:
          type: integer
          format: int32
        keycloakId:
          type: string
          format: uuid
          description: Unique keycloak identifier
        loginName:
          type: string
        userRoleEnum:
          $ref: '#/components/schemas/UserRole'
        lobbyId:
          type: integer
          format: int32
          description: ID of the lobby the user is currently associated with.
    UserRole:
      type: string
      enum:
        - USER_ROLE
        - ADMIN_ROLE
    LobbyCreateRequestDTO:
      type: object
      properties:
        name:
          type: string
    UserCreateRequest:
      type: object
      required:
        - username
        - firstName
        - lastName
        - email
        - password
      properties:
#        That will be username on the page
        username:
          type: string
          description: User's chosen username
          example: ThatWillBeUsername
        firstName:
          type: string
          description: User's first name
          example: Test
        lastName:
          type: string
          description: User's last name
          example: Admin
        email:
          type: string
          format: email
          description: User's email address
          example: ThatWillBeUsername@gmail.com
        password:
          type: string
          format: password
          description: User's chosen password
          minLength: 8
          example: StrongPassword123!

paths:
  /lobbies:
    get:
      summary: Get all lobbies
      operationId: listLobbies
      tags:
        - Lobbies
      responses:
        '200':
          description: A list of lobbies
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Lobby'
    post:
      summary: Create a new lobby
      operationId: createLobby
      tags:
        - Lobbies
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LobbyCreateRequestDTO'
      responses:
        '201':
          description: Lobby created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Lobby'
        '400':
          description: Invalid request
  /lobbies/{lobbyId}:
    get:
      summary: Get a lobby by ID
      operationId: getOneLobby
      tags:
        - Lobbies
      parameters:
        - name: lobbyId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: The requested lobby
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Lobby'
        '404':
          description: Lobby not found
  /lobbies/{lobbyId}/users:
    post:
      summary: Add user to lobby
      operationId: addUserToLobby
      tags:
        - Lobbies
      parameters:
        - name: lobbyId
          in: path
          required: true
          schema:
            type: integer
            format: int32
            description: ID of the lobby to add the user to
      responses:
        '200':
          description: User was successfully added to lobby
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Lobby'
        '401':
          description: Unauthorized — user not authenticated
        '404':
          description: Lobby not found
        '409':
          description: User is already in the lobby
  /lobbies/me:
    delete:
      summary: Remove authenticated user from their current lobby
      operationId: removeAuthenticatedUserFromLobby
      tags:
        - Lobbies
      responses:
        '200':
          description: Authenticated user was successfully removed from their lobby. Returns the updated lobby object or an empty object if no lobby.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Lobby'
        '401':
          description: Unauthorized. User not authenticated.
        '404':
          description: Authenticated user is not currently in any lobby.
        '500':
          description: Internal server error.
  /lobbies/{lobbyId}/users/{userId}:
    delete:
      summary: Remove a specific user from lobby (Admin access required)
      operationId: removeUserFromLobbyAsAdmin
      tags:
        - Lobbies
        - Admin
      parameters:
        - name: lobbyId
          in: path
          required: true
          schema:
            type: integer
            format: int32
            description: ID of the lobby from which to remove the user
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int32
            description: ID of the user to remove from the lobby
      responses:
        '200':
          description: User was successfully removed from lobby
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Lobby'
        '401':
          description: Unauthorized — user not authenticated
        '403':
          description: Forbidden — authenticated user does not have admin privileges
        '404':
          description: Lobby or User not found in this lobby
  /users:
    post:
      summary: Create user in keycloak and save it to the application database
      operationId: createUser
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreateRequest'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid request payload (missing required fields, invalid email format)
        '409':
          description: User with provided username or email already exists
        '500':
          description: Internal server error